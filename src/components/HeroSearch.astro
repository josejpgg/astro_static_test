---
import SearchIcon from "@icons/Search.astro"
import { getStudies } from "@lib/get-ij-studies"
import SectionContainer from "@components/SectionContainer.astro"
import Button from "@ui/Button.astro"
import ChevronDown from "@icons/ChevronDown.astro"

const SHORTCUTS = [
  {
    label: "üå±  Sin experiencia",
    href: "https://www.infojobs.net/jobsearch/search-results/list.xhtml?keyword=&segmentId=&page=1&sortBy=PUBLICATION_DATE&onlyForeignCountry=false&countryIds=17&sinceDate=ANY&experienceMin=_0_YEARS&experienceMax=_0_YEARS",
    track: "explore_no_experience",
  },
  {
    label: "üóìÔ∏è  Findes",
    href: "https://www.infojobs.net/ofertas-trabajo/fines-de-semana",
    track: "explore_weekend_jobs",
  },
  {
    label: "üïí  Media jornada",
    href: "https://www.infojobs.net/ofertas-trabajo/media-jornada",
    track: "explore_part_time",
  },
  {
    label: "üíº  Pr√°cticas",
    href: "https://www.infojobs.net/ofertas-trabajo/practicas",
    track: "explore_internships",
  },
] as const

const studies = await getStudies()
const sortedStudies = studies.sort((a, b) => a.order - b.order)
---

<SectionContainer>
  <section
    class="bg-hero-pattern rounded-3xl px-4 py-6 md:w-full md:max-w-7xl md:mx-auto"
  >
    <h1
      class="text-black/80 font-semibold tracking-[0.35px] text-2xl text-center pb-4 sm:text-4xl lg:hidden"
    >
      Tu carrera empieza aqu√≠
    </h1>

    <h1
      class="hidden text-black/80 font-semibold tracking-[0.35px] text-2xl text-center pb-4 sm:text-4xl lg:pb-8 lg:block"
    >
      Conecta tus estudios con el empleo ideal
    </h1>

    <search class="bg-white rounded-3xl p-4 lg:mx-10">
      <form
        id="hero-form"
        class="mx-5 lg:flex lg:justify-between lg:items-center lg:gap-2"
      >
        <div
          id="study-level-container"
          class="flex items-center border-b border-gray-300 lg:border-none relative select-none outline-none lg:focus-visible:outline lg:focus-visible:outline-[#167DB7] lg:focus-visible:outline-1 lg:focus-visible:outline-offset-0 lg:focus-visible:rounded-lg rounded-md lg:w-full lg:px-4"
          tabindex="0"
          aria-haspopup="listbox"
          aria-expanded="false"
          aria-labelledby="study-level-container"
        >
          <div
            class="w-full py-4 text-gray-600 bg-transparent cursor-pointer flex justify-between items-center"
            aria-label="Selecciona tu nivel de estudios"
          >
            <span id="study-level-text"> Nivel de estudios </span>

            <ChevronDown id="study-level-chevron" width="24" height="24" />
          </div>

          <ul
            id="study-level-options"
            role="listbox"
            class="absolute top-full mt-2 space-y-1 rounded-lg left-0 p-1 max-h-80 w-full border border-gray-300 bg-white shadow-md hidden overflow-auto no-scrollbar z-20"
            data-track="study_level"
          >
            {
              sortedStudies.map(({ id, value }) => {
                const isDefault = id === 0
                const literal = isDefault ? "Nivel de estudios" : value

                return (
                  <li
                    id="study-level-option"
                    role="option"
                    class={`p-3 transition-colors duration-200 ease-in-out rounded-md outline-none cursor-pointer hover:bg-[#F3F9FB] focus-visible:bg-[#F3F9FB] ${isDefault ? "text-gray-400 bg-none pointer-events-none" : "text-gray-600"}`}
                    data-value={id}
                    aria-disabled={isDefault}
                    aria-selected={isDefault}
                    tabindex={isDefault ? -1 : 0}
                  >
                    {literal}
                  </li>
                )
              })
            }
          </ul>
        </div>

        <div class="lg:w-full relative">
          <input
            autocomplete="off"
            id="hero-keywords"
            name="keywords"
            placeholder="Estudios, puesto, empresa..."
            class="w-full py-3 lg:px-3 border-b border-gray-300 lg:border-none text-gray-600 focus:outline-none lg:focus-visible:bg-[#E8F2F8] lg:focus-visible:outline lg:focus-visible:outline-[#167DB7] lg:focus-visible:outline-1 lg:focus-visible:outline-offset-0 lg:focus-visible:rounded-lg"
            role="combobox"
            aria-expanded="false"
            aria-controls="hero-keywords-list"
            aria-autocomplete="list"
          />

          <ul
            id="hero-keywords-list"
            class="bg-white w-full mx-auto absolute inset-0 top-14 min-h-[224px] h-full max-h-[224px] z-[999] flex flex-col gap-1 p-1 rounded-lg border border-gray-300 shadow-md no-scrollbar [&>li]:rounded-md [&>li]:transition-colors [&>li]:duration-300 [&>li]:text-ij-black [&>li:hover]:bg-[#F3F9FB] [&>li]:p-3 [&>li]:cursor-pointer [&>li:focus]:bg-[#F3F9FB] [&>li:focus]:outline-none"
            role="listbox"
            aria-label="Lista de sugerencias"
            tabindex="0"
          >
          </ul>
        </div>

        <div class="mb-8 lg:mb-0 lg:w-full">
          <input
            name="geolocation"
            placeholder="Provincia o poblaci√≥n"
            class="w-full py-3 lg:px-3 border-b border-gray-300 lg:border-none text-gray-600 focus:outline-none lg:focus-visible:bg-[#E8F2F8] lg:focus-visible:outline lg:focus-visible:outline-[#167DB7] lg:focus-visible:outline-1 lg:focus-visible:outline-offset-0 lg:focus-visible:rounded-lg"
          />
        </div>
        <Button
          type="submit"
          color="secondary"
          variant="solid"
          size="md"
          radius="full"
          class="shadow-md rounded-full text-lg font-medium bg-accent hover:saturate-150 transition text-white px-4 py-2 inline-flex gap-x-2 justify-center items-center w-full lg:size-12 lg:mt-1 lg:hover:scale-105"
          ariaLabel="Buscar ofertas"
          track="job_search"
        >
          <SearchIcon />
          <p class="lg:hidden">Buscar ofertas</p>
        </Button>
      </form>
    </search>

    <footer>
      <p class="text-center pt-8 pb-4">Explora trabajos que se adaptan a ti</p>
      <div
        class="max-xs:grid-cols-1 max-sm:grid max-sm:grid-cols-2 flex flex-wrap gap-4 justify-center"
      >
        {
          SHORTCUTS.map(({ label, href, track }) => (
            <Button
              as="link"
              href={href}
              color="default"
              variant="solid"
              radius="full"
              size="lg"
              class="bg-white whitespace-nowrap text-center rounded-full p-4 lg:px-6 shadow-sm text-primary transition hover:scale-105 hover:text-white hover:bg-primary !font-light"
              disableSaturateHover={true}
              track={track}
            >
              {label}
            </Button>
          ))
        }
      </div>
    </footer>
  </section>
</SectionContainer>

<script>
  const select = document.querySelector("select")

  function updateColors() {
    if (select?.value !== "indicar-nivel") {
      select?.classList.add("text-gray-600")
    }
  }

  document.addEventListener("DOMContentLoaded", updateColors)
  select?.addEventListener("change", updateColors)
</script>

<script>
  import { generateInfoJobsURL } from "@lib/generate-infojobs-url"

  const form = document.querySelector("#hero-form") as HTMLFormElement

  form?.addEventListener("submit", (event) => {
    event.preventDefault()
    const formData = new FormData(form)
    const level = formData.get("study-level")?.toString() ?? ""
    const keyword = formData.get("keywords")?.toString() ?? ""
    const provinceIds =
      form.querySelector('input[name="geolocation"]')?.getAttribute("value") ??
      ""

    const searchURL = generateInfoJobsURL({
      keyword,
      level,
      provinceIds,
    })

    window.location.href = searchURL
  })
</script>

<script>
  import { queryKeywords } from "@lib/queryKeywords"

  const inputKeyword = document.querySelector(
    "#hero-keywords"
  ) as HTMLInputElement
  const keywordsContainer = document.querySelector(
    "#hero-keywords-list"
  ) as HTMLUListElement

  const renderedKeywords = new Set()

  // debounce para retrasar el fetch hacia la API que devuelve las keywords.
  const debounce = (func: Function, delay: number) => {
    let timeoutId: ReturnType<typeof setTimeout>
    return (...args: any[]) => {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => func(...args), delay)
    }
  }

  const debouncedFetchKeywords = debounce((value: string) => {
    fetchKeywords(value)
  }, 300)

  inputKeyword?.addEventListener("input", (event) => {
    const value = (event.target as HTMLInputElement).value

    if (value.length > 1) {
      debouncedFetchKeywords(value)
      openListElement()
    } else {
      closeListElement()
    }
  })

  const fetchKeywords = async (value: string) => {
    const keywordsList: [] = await queryKeywords(value)

    keywordsContainer.innerHTML = ""
    renderedKeywords.clear()

    if (keywordsList.length > 0) {
      keywordsList.forEach(({ value: queryValue }) => {
        if (!renderedKeywords.has(queryValue)) {
          renderedKeywords.add(queryValue)

          const li = document.createElement("li")
          li.setAttribute("role", "option")
          li.tabIndex = 0
          li.id = `keyword-${queryValue}`
          li.innerHTML = getHighlightedKeyword(value, queryValue)

          li.addEventListener("click", () => {
            inputKeyword.value = li.textContent!
            closeListElement()
          })

          keywordsContainer.appendChild(li)
        }
      })

      openListElement()
    } else {
      closeListElement()
    }
  }

  const getHighlightedKeyword = (
    inputValue: string,
    queryValue: string
  ): string => {
    const regex = new RegExp(inputValue, "gi")
    return queryValue.replace(
      regex,
      (match) => `<mark class="font-bold bg-transparent">${match}</mark>`
    )
  }

  const handleClickOutsideList = (event: any) => {
    if (!event.target.matches("#hero-keywords-list *")) {
      closeListElement()
    } else {
      document.removeEventListener("click", handleClickOutsideList)
    }
  }

  const openListElement = () => {
    keywordsContainer.classList.add("list-active")
    inputKeyword.ariaExpanded = "true"
    document.addEventListener("keydown", handleKeyPress)
  }

  const closeListElement = () => {
    keywordsContainer.classList.remove("list-active")
    keywordsContainer.ariaExpanded = "false"
    keywordsContainer.innerHTML = ""
    renderedKeywords.clear()
    document.removeEventListener("keydown", handleKeyPress)
  }

  const handleKeyPress = (event: KeyboardEvent) => {
    if (event.code === "ArrowDown" || event.code === "ArrowUp") {
      event.preventDefault()
      const activeElement = document.activeElement

      if (activeElement?.tagName !== "LI") {
        const firstElement =
          keywordsContainer.firstElementChild as HTMLLIElement
        firstElement.tabIndex = 0
        firstElement.focus()
        return
      }

      const nextElement =
        event.code === "ArrowDown"
          ? (activeElement.nextElementSibling as HTMLLIElement)
          : (activeElement.previousElementSibling as HTMLLIElement)

      if (nextElement) {
        activeElement.setAttribute("tabindex", "-1")
        nextElement.setAttribute("tabindex", "0")
        nextElement.focus()
      }
    }

    if (event.code === "Enter" || event.code === "Space") {
      event.preventDefault()
      const activeElement = document.activeElement

      if (activeElement?.tagName === "LI") {
        inputKeyword.value = activeElement.textContent!
        closeListElement()
      }
    }

    if (event.code === "Escape") {
      event.preventDefault()
      closeListElement()
    }
  }

  document.addEventListener("click", handleClickOutsideList)
</script>

<style>
  #hero-keywords-list {
    visibility: hidden;
    opacity: 0;
    overflow-y: scroll;
    scrollbar-width: none;
  }

  #hero-keywords-list.list-active {
    visibility: visible;
    opacity: 1;
  }
</style>

<script>
  import { getProvinceId } from "@lib/list-provinces-ids"
  const geolocationInput = document.querySelector(
    'input[name="geolocation"]'
  ) as HTMLInputElement | null

  geolocationInput?.addEventListener("input", function () {
    getProvinceId(this)
  })
</script>

<script>
  const $ = document.querySelector.bind(document)
  const studyLevelContainer = $("#study-level-container")
  const studyLevelOptions = $("#study-level-options") as HTMLUListElement
  const studyLevelOption = $("#study-level-option")
  const studyLevelText = $("#study-level-text")
  const studyLevelChevron = $("#study-level-chevron")
  const hiddenSelect = document.createElement("input")

  hiddenSelect.type = "hidden"
  hiddenSelect.name = "study-level"
  studyLevelContainer?.appendChild(hiddenSelect)

  studyLevelContainer?.addEventListener("click", () => {
    const isExpanded =
      studyLevelContainer?.getAttribute("aria-expanded") === "true"
    studyLevelContainer?.setAttribute("aria-expanded", `${!isExpanded}`)
    studyLevelChevron?.classList.toggle("rotate-180")
    studyLevelOptions?.classList.toggle("hidden")
  })

  document.addEventListener("click", (event) => {
    if (!studyLevelContainer?.contains(event.target as Node)) {
      studyLevelContainer?.setAttribute("aria-expanded", "false")
      studyLevelChevron?.classList.remove("rotate-180")
      studyLevelOptions?.classList.add("hidden")
    }
  })

  studyLevelContainer?.addEventListener("keydown", (evt) => {
    const event = evt as KeyboardEvent

    const isExpanded =
      studyLevelContainer.getAttribute("aria-expanded") === "true"

    if (event.key === "Enter" || event.key === " ") {
      if (!isExpanded) {
        studyLevelContainer.setAttribute("aria-expanded", "true")
        studyLevelChevron?.classList.toggle("rotate-180")
        studyLevelOptions?.classList.toggle("hidden")
        event.preventDefault()
      } else {
        const activeOption = document.activeElement as Element | null
        const selectedOption = activeOption?.closest("[data-value]")

        if (
          selectedOption &&
          selectedOption.getAttribute("data-value") !== "0"
        ) {
          const value = selectedOption.getAttribute("data-value")
          const text = selectedOption.textContent?.trim()

          if (studyLevelText && hiddenSelect) {
            studyLevelText.textContent = text as string
            hiddenSelect.value = value as string
          }

          studyLevelOptions
            ?.querySelectorAll("[data-value]")
            .forEach((option) => {
              option.classList.remove("bg-[#F3F9FB]")
            })
          selectedOption.classList.add("bg-[#F3F9FB]")

          studyLevelContainer?.setAttribute("aria-expanded", "false")
          studyLevelChevron?.classList.remove("rotate-180")
          studyLevelOptions?.classList.add("hidden")

          event.preventDefault()
        }
      }
    }

    if (isExpanded && (event.key === "ArrowDown" || event.key === "ArrowUp")) {
      const options = studyLevelOptions?.querySelectorAll(
        "[data-value]"
      ) as NodeListOf<HTMLElement>
      let index = Array.from(options).findIndex(
        (option) => option === document.activeElement
      )

      if (event.key === "ArrowDown") index++
      if (event.key === "ArrowUp") index--
      if (index >= 0 && index < options.length) options[index]?.focus()

      event.preventDefault()
    }

    if (isExpanded && event.key === "Escape") {
      studyLevelContainer?.setAttribute("aria-expanded", "false")
      studyLevelChevron?.classList.remove("rotate-180")
      studyLevelOptions?.classList.add("hidden")
    }
  })

  studyLevelOptions?.addEventListener("click", (event) => {
    const target = event.target as Element | null
    const selectedOption = target?.closest("[data-value]")

    if (selectedOption && selectedOption.getAttribute("data-value") !== "0") {
      const value = selectedOption.getAttribute("data-value")
      const text = selectedOption.textContent?.trim()

      if (studyLevelText && hiddenSelect) {
        studyLevelText.textContent = text as string
        hiddenSelect.value = value as string
      }

      studyLevelOptions.querySelectorAll("[data-value]").forEach((option) => {
        option.classList.remove("bg-[#F3F9FB]")
      })
      selectedOption.classList.add("bg-[#F3F9FB]")
    }
  })

  studyLevelOption?.addEventListener("click", () => {
    studyLevelContainer?.setAttribute("aria-expanded", "false")
    studyLevelChevron?.classList.remove("rotate-180")
    studyLevelOptions?.classList.add("hidden")
  })

  studyLevelOptions?.addEventListener("wheel", (evt) => {
    const event = evt as WheelEvent
    const { deltaY } = event
    const { scrollTop, scrollHeight, offsetHeight } = studyLevelOptions

    if (
      (deltaY < 0 && scrollTop === 0) ||
      (deltaY > 0 && scrollTop + offsetHeight >= scrollHeight)
    ) {
      event.preventDefault()
    }
  })
</script>
